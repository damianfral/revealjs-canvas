// Generated by CoffeeScript 1.6.3
(function() {
  var DrawableElement,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DrawableElement = (function() {
    /* 
    	@param {canvasEl} DOMElement
    */

    function DrawableElement(canvasEl) {
      this.canvasEl = canvasEl;
      this.stopPaint = __bind(this.stopPaint, this);
      this.paint = __bind(this.paint, this);
      this.startPaint = __bind(this.startPaint, this);
      this.getCursorPosition = __bind(this.getCursorPosition, this);
      this.canvasEl.style.width = "1600";
      this.canvasEl.style.height = "900";
      this.canvasEl.width = "1600";
      this.canvasEl.height = "900";
      this.ctx = this.canvasEl.getContext("2d");
      this.ctx.lineWidth = 5;
      this.ctx.lineJoin = 'round';
      this.ctx.lineCap = 'round';
      this.ctx.strokeStyle = 'red';
      this.canvasEl.addEventListener("mousedown", this.startPaint);
      this.mousePos = [0, 0];
    }

    /* 
    	@param e 		DOMEvent
    
    	@return {Array} Current mouse position.
    */


    DrawableElement.prototype.getCursorPosition = function(e) {
      var rect;
      this.lastMousePos = this.mousePos.slice(0);
      rect = this.canvasEl.getBoundingClientRect();
      this.mousePos = [e.clientX - rect.left, e.clientY - rect.top];
      return this.mousePos;
    };

    DrawableElement.prototype.startPaint = function(e) {
      this.lastMousePos = this.getCursorPosition(e);
      this.canvasEl.addEventListener("mousemove", this.paint);
      return this.canvasEl.addEventListener("mouseup", this.stopPaint);
    };

    DrawableElement.prototype.paint = function(e) {
      var position;
      position = this.getCursorPosition(e);
      this.ctx.beginPath();
      this.ctx.moveTo(this.lastMousePos[0], this.lastMousePos[1]);
      this.ctx.lineTo(this.mousePos[0], this.mousePos[1]);
      this.ctx.closePath();
      return this.ctx.stroke();
    };

    DrawableElement.prototype.stopPaint = function(e) {
      return this.canvasEl.removeEventListener("mousemove", this.paint);
    };

    return DrawableElement;

  })();

}).call(this);
